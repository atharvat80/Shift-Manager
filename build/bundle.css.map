{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Login.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Login from \"./Login.svelte\";\n\timport { slide } from 'svelte/transition';\n\tconst url = document.location.origin;\n\tconst days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\n\tconst months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\n\tlet shifts = {};\n\tlet selected = new Array;\n\tlet newShift = {};\n\tlet wage = 6.45;\n\tlet showForm = false;\n\tlet username;\n\tlet total = getTotal();\n\t$: if (username !== undefined) {\n\t\tgetShifts()\n\t};\n\t\n\tfunction allChecked () {\n\t\tlet all = document.getElementById('all');\n\t\tif (all.checked){\n\t\t\tselected = Object.keys(shifts);\n\t\t} else {\n\t\t\tselected = [];\n\t\t}\n\t}\n\n\tfunction addShift () {\n\t\tshowForm = !showForm;\n\t\tshifts[newShift.date] = {\n\t\t\t\"start\": newShift.start,\n\t\t\t\"end\":newShift.end,\n\t\t\t\"duration\": diff(newShift.start, newShift.end)\n\t\t}\n\t\tnewShift = {};\n\t\ttotal = getTotal();\n\t\tsave();\n\t}\n\n\tfunction date (x) {\n\t\tlet y = new Date(x);\n\t\treturn `${days[y.getDay()]}, ${y.getDate()} ${months[y.getMonth()]}`\n\t}\n\n\tfunction del () {\n\t\tselected.forEach(shift => delete shifts[shift]);\n\t\tselected = [];\n\t\tsave();\n\t}\n\n\tfunction diff (start, end) {\n\t\tstart = start.split(\":\");\n\t\tend = end.split(\":\");\n\t\tvar startDate = new Date(0, 0, 0, start[0], start[1], 0);\n\t\tvar endDate = new Date(0, 0, 0, end[0], end[1], 0);\n\t\tvar diff = endDate.getTime() - startDate.getTime();\n\t\tvar hours = diff / 1000 / 60 / 60;\n\n\t\t// If using time pickers with 24 hours format, add the below line get exact hours\n\t\tif (hours < 0)\n\t\thours = hours + 24;\n\n\t\treturn hours.toFixed(2);\n\t}\n\n\tfunction getTotal () {\n\t\tlet a = 0.0;\n\t\tlet b = selected.length === 0 ? Object.keys(shifts) : selected;\n\t\tb.forEach(shift => {\n\t\t\ta += parseFloat(wage*shifts[shift].duration);\n\t\t})\n\t\treturn a.toFixed(2);\n\t}\n\n\tasync function getShifts () {\n\t\tconst shiftData = await fetch(`${url}/shifts?user=${username}`);\n\t\tconst wageData = await fetch(`${url}/getWage?user=${username}`);\n\t\tshifts = await shiftData.json();\n\t\twage = parseFloat(await wageData.json());\n\t}\n\n\tfunction save() {\n\t\tlet req = new XMLHttpRequest();\n        req.open(\"POST\", `${url}/save`, true);\n        req.setRequestHeader('Content-Type', 'application/json');\n        req.send(JSON.stringify({'user':username, \"data\": JSON.stringify(shifts)}));\n        req.onreadystatechange = () => {\n            if (req.readyState === 4) {\n                //console.log(req.responseText);\n            }\n        }\n\t}\n\n\tfunction updateStatus (x) {\n\t\tselected.forEach(shift => {shifts[shift].status = x});\n\t\tsave();\n\t\tselected = [];\n\t}\n\n\tfunction updateWage() {\n\t\tlet req = new XMLHttpRequest();\n        req.open(\"POST\", `${url}/setWage`, true);\n        req.setRequestHeader('Content-Type', 'application/json');\n        req.send(JSON.stringify({'user':username, \"wage\": wage}));\n        req.onreadystatechange = () => {\n            if (req.readyState === 4) {\n                //console.log(req.responseText);\n            }\n\t\t}\n\t\ttotal = getTotal();\n\t}\n</script>\n\n<svelte:head>\n\t<title>{username === undefined ? \"Login\" : \"Shift Manager\"}</title>\n</svelte:head>\n\n<header>\n\t<h3>{username === undefined ? \"Login\" : \"Shift Manager\"}</h3>\n</header>\n\n{#if username === undefined}\n\t<Login {url} on:login=\"{(msg) => {username = msg.detail.username}}\"/>\n{:else}\n\t<div transition:slide>\n\t\t<h4>üìÑ Your Details</h4><hr>\n\t\t<ul>\n\t\t\t<li>Username : <strong>{username}</strong></li>\n\t\t\t<li>\n\t\t\t\t<label for=\"wage\">Your wage : ¬£</label>\n\t\t\t\t<input type=\"number\" step=\"0.01\" min=\"0\" bind:value={wage} on:change=\"{updateWage}\" style=\"width: 80px\">\n\t\t\t\t<span>/ hr</span>\n\t\t\t</li>\n\t\t</ul>\n\t\t<button style=\"float: right\" on:click=\"{() => {username = undefined}}\">Logout</button>\n\n\t\t<br>\n\t\t\n\t\t<h4>üóÇ Your Shifts</h4><hr>\n\n\t\t{#if selected.length !== 0}\n\t\t\t<div transition:slide style=\"margin-bottom: 1rem;\">\n\t\t\t\t<button on:click={del}>üóë</button>\n\t\t\t\t<button on:click={() => {updateStatus(\"paid\")}}>‚úÖ Paid</button>\n\t\t\t\t<button on:click={() => {updateStatus(\"not-paid\")}}>‚ùå Not Paid</button>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t{#if Object.keys(shifts).length === 0}\n\t\t\t<pre style=\"text-align: center; padding:1rem;\">No shifts yet</pre>\n\t\t{:else}\n\t\t<div style=\"overflow:auto; word-break:none;\">\n\t\t\t<table style=\"white-space: nowrap;\">\n\t\t\t\t<thead>\n\t\t\t\t\t<th style=\"text-align: center;\">\n\t\t\t\t\t\t<input id=\"all\" type=\"checkbox\" checked=\"{selected.length === Object.keys(shifts).length}\" on:change={allChecked}>\n\t\t\t\t\t</th>\n\t\t\t\t\t<th>Date</th>\n\t\t\t\t\t<th>Start</th>\n\t\t\t\t\t<th>End</th>\n\t\t\t\t\t<th>Duration</th>\n\t\t\t\t\t<th>Wage</th>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{#each Object.keys(shifts).sort() as shift}\n\t\t\t\t\t\t<tr class=\"{shifts[shift].status}\">\n\t\t\t\t\t\t\t<td style=\"text-align: center;\">\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" bind:group={selected} value={shift} \n\t\t\t\t\t\t\t\tchecked=\"{selected.includes(shift)}\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>{date(shift)}</td>\n\t\t\t\t\t\t\t<td>{shifts[shift].start}</td>\n\t\t\t\t\t\t\t<td>{shifts[shift].end}</td>\n\t\t\t\t\t\t\t<td>{shifts[shift].duration} hrs</td>\n\t\t\t\t\t\t\t<td>¬£ {(wage*shifts[shift].duration).toFixed(2)}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t{/each}\n\t\t\t\t</tbody>\n\t\t\t\t<tfoot>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td colspan=\"6\">Total : ¬£ {selected === [] ? total : getTotal()}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tfoot>\n\t\t\t</table>\n\t\t</div>\n\t\t{/if}\n\t\t\n\t\t<button on:click={() => {showForm = !showForm}} style=\"float:right\">Add a Shift</button>\n\n\t\t<br>\n\n\t\t{#if showForm}\n\t\t\t<div transition:slide>\n\t\t\t\t<h4>üìÖ Record a New Shift</h4><hr>\n\t\t\t\t<form on:submit|preventDefault={addShift}>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<label for=\"date\">üìÖ Date : </label>\n\t\t\t\t\t\t<input bind:value={newShift.date} id=\"date\" type=\"date\" required>\n\t\t\t\t\t</fieldset>\n\t\t\t\t\t<p style=\"font-size: small; color:gray\">\n\t\t\t\t\t\tPlease use 24 hour time format unless specified otherwise by your browser\n\t\t\t\t\t</p>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<label for=\"start\">üïí Start Time : </label>\n\t\t\t\t\t\t<input bind:value={newShift.start} id=\"start\" type=\"time\" required><br>\n\t\t\t\t\t\t<label for=\"end\">üïò End Time &nbsp;&nbsp;: </label>\n\t\t\t\t\t\t<input bind:value={newShift.end} id=\"end\" type=\"time\" required>\n\t\t\t\t\t</fieldset>\n\t\t\t\t\t<button type=\"submit\" id=\"record\">Record</button>\n\t\t\t\t\t<button type=\"reset\">Reset</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n{/if}\n\n<style>\n\t.paid{\n\t\tbackground-color: #f0fff4;\n\t}\n\n\t.not-paid{\n\t\tbackground-color: #fff5f5;\n\t}\n</style>",
    "<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    export let url;\r\n    let username = '';\r\n    let password = '';\r\n    let eMsg;\r\n    const dispatch = createEventDispatcher();\r\n    \r\n    function sendMsg () {\r\n        dispatch('login', {\"username\": username});\r\n    }\r\n\r\n    function sendReq(path) {\r\n        let req = new XMLHttpRequest();\r\n        req.open(\"POST\", `${url}/${path}`, true);\r\n        req.setRequestHeader('Content-Type', 'application/json');\r\n        req.send(JSON.stringify({'username':username, \"password\": password}));\r\n        req.onreadystatechange = () => {\r\n            if (req.readyState === 4) {\r\n                req.status === 200 ? sendMsg() : eMsg = req.responseText;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<form on:submit|preventDefault>\r\n    <fieldset>\r\n        {#if eMsg !== undefined}\r\n            <p class=\"error\">{eMsg}</p>\r\n        {/if}\r\n        <p>\r\n            <label for=\"username\">Username</label><br>\r\n            <input id=\"username\" type=\"text\" placeholder=\"Enter username\" bind:value={username} required>\r\n        </p>\r\n        <p>\r\n            <label for=\"password\">Password </label><br>\r\n            <input id=\"password\" type=\"password\" placeholder=\"Enter password\" bind:value={password} required>\r\n        </p>\r\n        <button type=\"submit\" on:click=\"{() => {sendReq('login')}}\">Login</button>\r\n        <button type=\"submit\" on:click=\"{() => {sendReq('signup')}}\">Sign Up</button>\r\n    </fieldset>\r\n</form>\r\n\r\n<style>\r\n    .error {\r\n        color: red;\r\n        font-size: small;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AAwNC,mBAAK,CAAC,AACL,gBAAgB,CAAE,OAAO,AAC1B,CAAC,AAED,uBAAS,CAAC,AACT,gBAAgB,CAAE,OAAO,AAC1B,CAAC;AClLE,MAAM,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,KAAK,AACpB,CAAC"
}